
Opdracht2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000002d2  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800116  00800116  0000037c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f28  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9e  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000602  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c6  00000000  00000000  00002594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e0  00000000  00000000  00002a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	20 c1       	rjmp	.+576    	; 0x26a <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9d d0       	rcall	.+314    	; 0x1fe <main>
  c4:	04 c1       	rjmp	.+520    	; 0x2ce <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_writeChar>:
	lcd_command(0x01);
}

void lcd_writeChar( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
  c8:	98 2f       	mov	r25, r24
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
  ce:	95 b3       	in	r25, 0x15	; 21
  d0:	9c 60       	ori	r25, 0x0C	; 12
  d2:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	ef ec       	ldi	r30, 0xCF	; 207
  d6:	f7 e0       	ldi	r31, 0x07	; 7
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_writeChar+0x10>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_writeChar+0x16>
  de:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
  e0:	94 e0       	ldi	r25, 0x04	; 4
  e2:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
  e4:	f0 e1       	ldi	r31, 0x10	; 16
  e6:	8f 9f       	mul	r24, r31
  e8:	c0 01       	movw	r24, r0
  ea:	11 24       	eor	r1, r1
  ec:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	8c 60       	ori	r24, 0x0C	; 12
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_writeChar+0x30>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_writeChar+0x36>
  fe:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop
 100:	15 ba       	out	0x15, r1	; 21
 102:	08 95       	ret

00000104 <display_text>:
	lcd_command( 0x06 ); //was 0x06
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
}

void display_text(char *str) {
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ef ec       	ldi	r30, 0xCF	; 207
 10e:	f7 e0       	ldi	r31, 0x07	; 7
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <display_text+0xc>
 114:	00 c0       	rjmp	.+0      	; 0x116 <display_text+0x12>
 116:	00 00       	nop
	_delay_ms(1);
	int length = strlen(str);
 118:	fc 01       	movw	r30, r24
 11a:	01 90       	ld	r0, Z+
 11c:	00 20       	and	r0, r0
 11e:	e9 f7       	brne	.-6      	; 0x11a <display_text+0x16>
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	e8 1b       	sub	r30, r24
 124:	f9 0b       	sbc	r31, r25
	for(int x = 0; x < length; x++) {
 126:	1e 16       	cp	r1, r30
 128:	1f 06       	cpc	r1, r31
 12a:	54 f4       	brge	.+20     	; 0x140 <display_text+0x3c>
 12c:	ec 01       	movw	r28, r24
 12e:	8c 01       	movw	r16, r24
 130:	0e 0f       	add	r16, r30
 132:	1f 1f       	adc	r17, r31
		lcd_writeChar(str[x]);
 134:	89 91       	ld	r24, Y+
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	c7 df       	rcall	.-114    	; 0xc8 <lcd_writeChar>
}

void display_text(char *str) {
	_delay_ms(1);
	int length = strlen(str);
	for(int x = 0; x < length; x++) {
 13a:	c0 17       	cp	r28, r16
 13c:	d1 07       	cpc	r29, r17
 13e:	d1 f7       	brne	.-12     	; 0x134 <display_text+0x30>
		lcd_writeChar(str[x]);
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <lcd_command>:
	// (EN=0 RS=0)
}

void lcd_command ( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
 14a:	98 2f       	mov	r25, r24
 14c:	90 7f       	andi	r25, 0xF0	; 240
 14e:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
 150:	ab 9a       	sbi	0x15, 3	; 21
 152:	ef ec       	ldi	r30, 0xCF	; 207
 154:	f7 e0       	ldi	r31, 0x07	; 7
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_command+0xc>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_command+0x12>
 15c:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
 15e:	94 e0       	ldi	r25, 0x04	; 4
 160:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
 162:	f0 e1       	ldi	r31, 0x10	; 16
 164:	8f 9f       	mul	r24, r31
 166:	c0 01       	movw	r24, r0
 168:	11 24       	eor	r1, r1
 16a:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
 16c:	ab 9a       	sbi	0x15, 3	; 21
 16e:	8f ec       	ldi	r24, 0xCF	; 207
 170:	97 e0       	ldi	r25, 0x07	; 7
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_command+0x28>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_command+0x2e>
 178:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop
 17a:	15 ba       	out	0x15, r1	; 21
 17c:	08 95       	ret

0000017e <init>:
#include <string.h>
#include "LCD.h"

void init() {
	// return home
	lcd_command( 0x02 );
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	e4 df       	rcall	.-56     	; 0x14a <lcd_command>
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
 182:	88 e2       	ldi	r24, 0x28	; 40
 184:	e2 df       	rcall	.-60     	; 0x14a <lcd_command>
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
 186:	8c e0       	ldi	r24, 0x0C	; 12
 188:	e0 df       	rcall	.-64     	; 0x14a <lcd_command>
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 ); //was 0x06
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	de df       	rcall	.-68     	; 0x14a <lcd_command>
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	dc cf       	rjmp	.-72     	; 0x14a <lcd_command>
 192:	08 95       	ret

00000194 <set_display>:
 194:	0f 93       	push	r16
	for(int x = 0; x < length; x++) {
		lcd_writeChar(str[x]);
	}
}

void set_display(int pos) {
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ef ec       	ldi	r30, 0xCF	; 207
 19e:	f7 e0       	ldi	r31, 0x07	; 7
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <set_display+0xc>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <set_display+0x12>
 1a6:	00 00       	nop
	_delay_ms(1);
	for(int x = 0; x < pos; x++) {
 1a8:	18 16       	cp	r1, r24
 1aa:	19 06       	cpc	r1, r25
 1ac:	4c f4       	brge	.+18     	; 0x1c0 <set_display+0x2c>
 1ae:	8c 01       	movw	r16, r24
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_command(0b0000011000);
 1b4:	88 e1       	ldi	r24, 0x18	; 24
 1b6:	c9 df       	rcall	.-110    	; 0x14a <lcd_command>
	}
}

void set_display(int pos) {
	_delay_ms(1);
	for(int x = 0; x < pos; x++) {
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	0c 17       	cp	r16, r28
 1bc:	1d 07       	cpc	r17, r29
 1be:	d1 f7       	brne	.-12     	; 0x1b4 <set_display+0x20>
		lcd_command(0b0000011000);
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <clr_display>:
 1ca:	8f ec       	ldi	r24, 0xCF	; 207
 1cc:	97 e0       	ldi	r25, 0x07	; 7
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <clr_display+0x4>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <clr_display+0xa>
 1d4:	00 00       	nop
	}
}

void clr_display() {
	_delay_ms(1);
	lcd_command(0x01);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	b8 cf       	rjmp	.-144    	; 0x14a <lcd_command>
 1da:	08 95       	ret

000001dc <wait>:
		
		return 0;
}

void wait(int ms) {
	for(int x = 0; x < ms; x++) {
 1dc:	18 16       	cp	r1, r24
 1de:	19 06       	cpc	r1, r25
 1e0:	6c f4       	brge	.+26     	; 0x1fc <wait+0x20>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	ef ec       	ldi	r30, 0xCF	; 207
 1e8:	f7 e0       	ldi	r31, 0x07	; 7
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <wait+0xe>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <wait+0x14>
 1f0:	00 00       	nop
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	3f 4f       	sbci	r19, 0xFF	; 255
 1f6:	82 17       	cp	r24, r18
 1f8:	93 07       	cpc	r25, r19
 1fa:	a9 f7       	brne	.-22     	; 0x1e6 <wait+0xa>
 1fc:	08 95       	ret

000001fe <main>:
static char text[] = "Aantal keer gedrukt: ";
int aantalKeer = 0;

int main(void)
{
	DDRB = 0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 202:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
 204:	11 ba       	out	0x11, r1	; 17
	
	TCNT2 = -1;
 206:	84 bd       	out	0x24, r24	; 36
	TIMSK |= (1 << 6);
 208:	87 b7       	in	r24, 0x37	; 55
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	87 bf       	out	0x37, r24	; 55
	SREG |= (1 << 7);
 20e:	8f b7       	in	r24, 0x3f	; 63
 210:	80 68       	ori	r24, 0x80	; 128
 212:	8f bf       	out	0x3f, r24	; 63
	TCCR2 = 0b0000111;  //TCCR2 = 0b0010111;
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	85 bd       	out	0x25, r24	; 37
	sei();
 218:	78 94       	sei
	
	PORTC = 0x00;
 21a:	15 ba       	out	0x15, r1	; 21
	
		init();
 21c:	b0 df       	rcall	.-160    	; 0x17e <init>
		clr_display();
 21e:	d5 df       	rcall	.-86     	; 0x1ca <clr_display>
 220:	e0 e0       	ldi	r30, 0x00	; 0
		int length = strlen(text) + 1;
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	01 90       	ld	r0, Z+
 226:	00 20       	and	r0, r0
 228:	e9 f7       	brne	.-6      	; 0x224 <main+0x26>
 22a:	8f 01       	movw	r16, r30
 22c:	00 50       	subi	r16, 0x00	; 0
 22e:	11 40       	sbci	r17, 0x01	; 1
 230:	10 16       	cp	r1, r16
		while (1)
		{
			for(int x = 0; x< length; x++) {
 232:	11 06       	cpc	r1, r17
 234:	ec f7       	brge	.-6      	; 0x230 <main+0x32>
 236:	c0 e0       	ldi	r28, 0x00	; 0
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	84 b5       	in	r24, 0x24	; 36
				PORTB = TCNT2;
 23c:	88 bb       	out	0x18, r24	; 24
 23e:	81 e0       	ldi	r24, 0x01	; 1
				set_display(1);
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	a8 df       	rcall	.-176    	; 0x194 <set_display>
 244:	8a ef       	ldi	r24, 0xFA	; 250
				wait(250);
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	c9 df       	rcall	.-110    	; 0x1dc <wait>
 24a:	21 96       	adiw	r28, 0x01	; 1
 24c:	c0 17       	cp	r28, r16
		init();
		clr_display();
		int length = strlen(text) + 1;
		while (1)
		{
			for(int x = 0; x< length; x++) {
 24e:	d1 07       	cpc	r29, r17
 250:	a4 f3       	brlt	.-24     	; 0x23a <main+0x3c>
 252:	ee cf       	rjmp	.-36     	; 0x230 <main+0x32>

00000254 <displayUpdate>:
 254:	ba df       	rcall	.-140    	; 0x1ca <clr_display>
 256:	80 e0       	ldi	r24, 0x00	; 0
	TCNT2 = -1;
}

void displayUpdate() {
		clr_display();
		display_text(text);
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	54 df       	rcall	.-344    	; 0x104 <display_text>
		lcd_writeChar(aantalKeer+'0');
 25c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 260:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 264:	c0 96       	adiw	r24, 0x30	; 48
 266:	30 cf       	rjmp	.-416    	; 0xc8 <lcd_writeChar>
 268:	08 95       	ret

0000026a <__vector_10>:
	for(int x = 0; x < ms; x++) {
		_delay_ms(1);
	}
}

ISR ( TIMER2_OVF_vect ) {
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	0b b6       	in	r0, 0x3b	; 59
 276:	0f 92       	push	r0
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	aantalKeer++;
 290:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 294:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 29e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	displayUpdate();
 2a2:	d8 df       	rcall	.-80     	; 0x254 <displayUpdate>
	TCNT2 = -1;
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	84 bd       	out	0x24, r24	; 36
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0b be       	out	0x3b, r0	; 59
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
