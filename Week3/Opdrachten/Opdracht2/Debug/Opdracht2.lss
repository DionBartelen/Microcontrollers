
Opdracht2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000df2  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a13  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056c  00000000  00000000  00001a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049a  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f1  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002a67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	41 d0       	rcall	.+130    	; 0x11c <main>
  9a:	4d c0       	rjmp	.+154    	; 0x136 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <lcd_command>:
void set_display(int pos) {
	_delay_ms(1);
	for(int x = 0; x < pos; x++) {
		lcd_command(0b0000011000);
	}
}
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	95 bb       	out	0x15, r25	; 21
  a4:	ab 9a       	sbi	0x15, 3	; 21
  a6:	ef ec       	ldi	r30, 0xCF	; 207
  a8:	f7 e0       	ldi	r31, 0x07	; 7
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_command+0xc>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_command+0x12>
  b0:	00 00       	nop
  b2:	94 e0       	ldi	r25, 0x04	; 4
  b4:	95 bb       	out	0x15, r25	; 21
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	85 bb       	out	0x15, r24	; 21
  c0:	ab 9a       	sbi	0x15, 3	; 21
  c2:	8f ec       	ldi	r24, 0xCF	; 207
  c4:	97 e0       	ldi	r25, 0x07	; 7
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_command+0x28>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_command+0x2e>
  cc:	00 00       	nop
  ce:	15 ba       	out	0x15, r1	; 21
  d0:	08 95       	ret

000000d2 <init>:
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	e4 df       	rcall	.-56     	; 0x9e <lcd_command>
  d6:	88 e2       	ldi	r24, 0x28	; 40
  d8:	e2 df       	rcall	.-60     	; 0x9e <lcd_command>
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	e0 df       	rcall	.-64     	; 0x9e <lcd_command>
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	de df       	rcall	.-68     	; 0x9e <lcd_command>
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	dc cf       	rjmp	.-72     	; 0x9e <lcd_command>
  e6:	08 95       	ret

000000e8 <clr_display>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8f ec       	ldi	r24, 0xCF	; 207
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <clr_display+0x4>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <clr_display+0xa>
  f2:	00 00       	nop
	}
}

void clr_display() {
	_delay_ms(1);
	lcd_command(0x01);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	d3 cf       	rjmp	.-90     	; 0x9e <lcd_command>
  f8:	08 95       	ret

000000fa <wait>:
		wait(10);
    }
}

void wait(int ms) {
	for(int x = 0; x < ms; x++) {
  fa:	18 16       	cp	r1, r24
  fc:	19 06       	cpc	r1, r25
  fe:	6c f4       	brge	.+26     	; 0x11a <wait+0x20>
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	ef ec       	ldi	r30, 0xCF	; 207
 106:	f7 e0       	ldi	r31, 0x07	; 7
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <wait+0xe>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <wait+0x14>
 10e:	00 00       	nop
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	82 17       	cp	r24, r18
 116:	93 07       	cpc	r25, r19
 118:	a9 f7       	brne	.-22     	; 0x104 <wait+0xa>
 11a:	08 95       	ret

0000011c <main>:

static char text[] = "Aantal keer gedrukt: ";

int main(void)
{
	DDRB = 0xFF;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 120:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
 122:	11 ba       	out	0x11, r1	; 17
	//TCNT2 = -1;
	//TIMSK = |= 1 << 6;
	//TCCR2 = 0b00000111;
	PORTC = 0x00;
 124:	15 ba       	out	0x15, r1	; 21
	
	init();
 126:	d5 df       	rcall	.-86     	; 0xd2 <init>
	clr_display();
 128:	df df       	rcall	.-66     	; 0xe8 <clr_display>
 12a:	84 b5       	in	r24, 0x24	; 36
    /* Replace with your application code */
    while (1) 
    {
		PORTA = TCNT2;
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	8a e0       	ldi	r24, 0x0A	; 10
		wait(10);
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	e3 df       	rcall	.-58     	; 0xfa <wait>
 134:	fa cf       	rjmp	.-12     	; 0x12a <main+0xe>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
