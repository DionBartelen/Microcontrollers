
OpdrachtB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000939  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000864  00000000  00000000  00000bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  00001435  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000130  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__vector_1>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__vector_2>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	4e d0       	rcall	.+156    	; 0x136 <main>
  9a:	80 c0       	rjmp	.+256    	; 0x19c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <__vector_1>:
		wait(10);
    }
}

ISR( INT0_vect )
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	5f 93       	push	r21
  aa:	6f 93       	push	r22
  ac:	7f 93       	push	r23
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
	if(PORTE == 0x00) {
  b6:	83 b1       	in	r24, 0x03	; 3
  b8:	81 11       	cpse	r24, r1
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <__vector_1+0x24>
		PORTE = 0b00000001;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	83 b9       	out	0x03, r24	; 3
  c0:	08 c0       	rjmp	.+16     	; 0xd2 <__vector_1+0x34>
	}else {
	PORTE = (PORTE << 1) % 0xFF;
  c2:	83 b1       	in	r24, 0x03	; 3
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6f ef       	ldi	r22, 0xFF	; 255
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	3f d0       	rcall	.+126    	; 0x14e <__divmodhi4>
  d0:	83 b9       	out	0x03, r24	; 3
	}
}
  d2:	bf 91       	pop	r27
  d4:	af 91       	pop	r26
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	7f 91       	pop	r23
  dc:	6f 91       	pop	r22
  de:	5f 91       	pop	r21
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_2>:

ISR( INT1_vect )
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	if(PORTE == 0x00) {
  f6:	83 b1       	in	r24, 0x03	; 3
  f8:	81 11       	cpse	r24, r1
  fa:	03 c0       	rjmp	.+6      	; 0x102 <__vector_2+0x18>
		PORTE = 0b00000001;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	83 b9       	out	0x03, r24	; 3
 100:	03 c0       	rjmp	.+6      	; 0x108 <__vector_2+0x1e>
		}else {
		PORTE = (PORTE >> 1) % 0xFF;
 102:	83 b1       	in	r24, 0x03	; 3
 104:	86 95       	lsr	r24
 106:	83 b9       	out	0x03, r24	; 3
	}
}
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <wait>:


void wait(int ms) {
	for (int i=0; i<ms; i++)
 114:	18 16       	cp	r1, r24
 116:	19 06       	cpc	r1, r25
 118:	6c f4       	brge	.+26     	; 0x134 <wait+0x20>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	ef ec       	ldi	r30, 0xCF	; 207
 120:	f7 e0       	ldi	r31, 0x07	; 7
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <wait+0xe>
 126:	00 c0       	rjmp	.+0      	; 0x128 <wait+0x14>
 128:	00 00       	nop
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	82 17       	cp	r24, r18
 130:	93 07       	cpc	r25, r19
 132:	a9 f7       	brne	.-22     	; 0x11e <wait+0xa>
 134:	08 95       	ret

00000136 <main>:

static int pos = 0;

int main(void)
{
	DDRE = 0xFF;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	82 b9       	out	0x02, r24	; 2

	DDRD = 0x00;
 13a:	11 ba       	out	0x11, r1	; 17
	EICRA = 0b00111111;
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0b00111111;
 142:	89 bf       	out	0x39, r24	; 57
	sei();
 144:	78 94       	sei
	//PORTE = 0b00000001;
    /* Replace with your application code */
    while (1) 
    {
		//commentaar
		wait(10);
 146:	8a e0       	ldi	r24, 0x0A	; 10
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	e4 df       	rcall	.-56     	; 0x114 <wait>
 14c:	fc cf       	rjmp	.-8      	; 0x146 <main+0x10>

0000014e <__divmodhi4>:
 14e:	97 fb       	bst	r25, 7
 150:	07 2e       	mov	r0, r23
 152:	16 f4       	brtc	.+4      	; 0x158 <__divmodhi4+0xa>
 154:	00 94       	com	r0
 156:	06 d0       	rcall	.+12     	; 0x164 <__divmodhi4_neg1>
 158:	77 fd       	sbrc	r23, 7
 15a:	08 d0       	rcall	.+16     	; 0x16c <__divmodhi4_neg2>
 15c:	0b d0       	rcall	.+22     	; 0x174 <__udivmodhi4>
 15e:	07 fc       	sbrc	r0, 7
 160:	05 d0       	rcall	.+10     	; 0x16c <__divmodhi4_neg2>
 162:	3e f4       	brtc	.+14     	; 0x172 <__divmodhi4_exit>

00000164 <__divmodhi4_neg1>:
 164:	90 95       	com	r25
 166:	81 95       	neg	r24
 168:	9f 4f       	sbci	r25, 0xFF	; 255
 16a:	08 95       	ret

0000016c <__divmodhi4_neg2>:
 16c:	70 95       	com	r23
 16e:	61 95       	neg	r22
 170:	7f 4f       	sbci	r23, 0xFF	; 255

00000172 <__divmodhi4_exit>:
 172:	08 95       	ret

00000174 <__udivmodhi4>:
 174:	aa 1b       	sub	r26, r26
 176:	bb 1b       	sub	r27, r27
 178:	51 e1       	ldi	r21, 0x11	; 17
 17a:	07 c0       	rjmp	.+14     	; 0x18a <__udivmodhi4_ep>

0000017c <__udivmodhi4_loop>:
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	a6 17       	cp	r26, r22
 182:	b7 07       	cpc	r27, r23
 184:	10 f0       	brcs	.+4      	; 0x18a <__udivmodhi4_ep>
 186:	a6 1b       	sub	r26, r22
 188:	b7 0b       	sbc	r27, r23

0000018a <__udivmodhi4_ep>:
 18a:	88 1f       	adc	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	5a 95       	dec	r21
 190:	a9 f7       	brne	.-22     	; 0x17c <__udivmodhi4_loop>
 192:	80 95       	com	r24
 194:	90 95       	com	r25
 196:	bc 01       	movw	r22, r24
 198:	cd 01       	movw	r24, r26
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
