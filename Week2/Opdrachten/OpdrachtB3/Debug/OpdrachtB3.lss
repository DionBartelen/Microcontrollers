
OpdrachtB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093d  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00000bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000392  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000276  00000000  00000000  00001c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	71 d0       	rcall	.+226    	; 0x17c <main>
  9a:	80 c0       	rjmp	.+256    	; 0x19c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <display>:
	}
}


void display(int num){
	if(num >= 15){
  c0:	8f 30       	cpi	r24, 0x0F	; 15
  c2:	91 05       	cpc	r25, r1
  c4:	1c f0       	brlt	.+6      	; 0xcc <display+0xc>
		PORTD = 0b01110001;
  c6:	81 e7       	ldi	r24, 0x71	; 113
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret
	}
	else if(num == 0){
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	19 f4       	brne	.+6      	; 0xd6 <display+0x16>
		PORTD = 0b00111111;
  d0:	8f e3       	ldi	r24, 0x3F	; 63
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	08 95       	ret
	}
	else if(num == 1){
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	91 05       	cpc	r25, r1
  da:	19 f4       	brne	.+6      	; 0xe2 <display+0x22>
		PORTD = 0b00000110;
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	82 bb       	out	0x12, r24	; 18
  e0:	08 95       	ret
	}
	else if(num == 2){
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	91 05       	cpc	r25, r1
  e6:	19 f4       	brne	.+6      	; 0xee <display+0x2e>
		PORTD = 0b01011011;
  e8:	8b e5       	ldi	r24, 0x5B	; 91
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	08 95       	ret
	}
	else if(num == 3){
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	91 05       	cpc	r25, r1
  f2:	19 f4       	brne	.+6      	; 0xfa <display+0x3a>
		PORTD = 0b01001111;
  f4:	8f e4       	ldi	r24, 0x4F	; 79
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	08 95       	ret
	}
	else if(num == 4){
  fa:	84 30       	cpi	r24, 0x04	; 4
  fc:	91 05       	cpc	r25, r1
  fe:	19 f4       	brne	.+6      	; 0x106 <display+0x46>
		PORTD = 0b01100110;
 100:	86 e6       	ldi	r24, 0x66	; 102
 102:	82 bb       	out	0x12, r24	; 18
 104:	08 95       	ret
	}
	else if(num == 5){
 106:	85 30       	cpi	r24, 0x05	; 5
 108:	91 05       	cpc	r25, r1
 10a:	19 f4       	brne	.+6      	; 0x112 <display+0x52>
		PORTD = 0b01101101;
 10c:	8d e6       	ldi	r24, 0x6D	; 109
 10e:	82 bb       	out	0x12, r24	; 18
 110:	08 95       	ret
	}
	else if(num == 6){
 112:	86 30       	cpi	r24, 0x06	; 6
 114:	91 05       	cpc	r25, r1
 116:	19 f4       	brne	.+6      	; 0x11e <display+0x5e>
		PORTD = 0b01111101;
 118:	8d e7       	ldi	r24, 0x7D	; 125
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	08 95       	ret
	}
	else if(num == 7){
 11e:	87 30       	cpi	r24, 0x07	; 7
 120:	91 05       	cpc	r25, r1
 122:	19 f4       	brne	.+6      	; 0x12a <display+0x6a>
		PORTD = 0b00000111;
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	82 bb       	out	0x12, r24	; 18
 128:	08 95       	ret
	}
	else if(num == 8){
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	91 05       	cpc	r25, r1
 12e:	19 f4       	brne	.+6      	; 0x136 <display+0x76>
		PORTD = 0b01111111;
 130:	8f e7       	ldi	r24, 0x7F	; 127
 132:	82 bb       	out	0x12, r24	; 18
 134:	08 95       	ret
	}
	else if(num == 9){
 136:	89 30       	cpi	r24, 0x09	; 9
 138:	91 05       	cpc	r25, r1
 13a:	19 f4       	brne	.+6      	; 0x142 <display+0x82>
		PORTD = 0b01101111;
 13c:	8f e6       	ldi	r24, 0x6F	; 111
 13e:	82 bb       	out	0x12, r24	; 18
 140:	08 95       	ret
	}
	else if(num == 10){
 142:	8a 30       	cpi	r24, 0x0A	; 10
 144:	91 05       	cpc	r25, r1
 146:	19 f4       	brne	.+6      	; 0x14e <display+0x8e>
		PORTD = 0b01110111;
 148:	87 e7       	ldi	r24, 0x77	; 119
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	08 95       	ret
	}
	else if(num == 11){
 14e:	8b 30       	cpi	r24, 0x0B	; 11
 150:	91 05       	cpc	r25, r1
 152:	19 f4       	brne	.+6      	; 0x15a <display+0x9a>
		PORTD = 0b01111100;
 154:	8c e7       	ldi	r24, 0x7C	; 124
 156:	82 bb       	out	0x12, r24	; 18
 158:	08 95       	ret
	}
	else if(num == 12){
 15a:	8c 30       	cpi	r24, 0x0C	; 12
 15c:	91 05       	cpc	r25, r1
 15e:	19 f4       	brne	.+6      	; 0x166 <display+0xa6>
		PORTD = 0b00111001;
 160:	89 e3       	ldi	r24, 0x39	; 57
 162:	82 bb       	out	0x12, r24	; 18
 164:	08 95       	ret
	}
	else if(num == 13){
 166:	8d 30       	cpi	r24, 0x0D	; 13
 168:	91 05       	cpc	r25, r1
 16a:	19 f4       	brne	.+6      	; 0x172 <display+0xb2>
		PORTD = 0b01011110;
 16c:	8e e5       	ldi	r24, 0x5E	; 94
 16e:	82 bb       	out	0x12, r24	; 18
 170:	08 95       	ret
	}
	else if(num == 14){
 172:	0e 97       	sbiw	r24, 0x0e	; 14
 174:	11 f4       	brne	.+4      	; 0x17a <display+0xba>
		PORTD = 0b01111001; 
 176:	89 e7       	ldi	r24, 0x79	; 121
 178:	82 bb       	out	0x12, r24	; 18
 17a:	08 95       	ret

0000017c <main>:
void wait(int);


int main(void)
{
	DDRD = 0xFF;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	81 bb       	out	0x11, r24	; 17
	
	/* Replace with your application code */
    while (1) 
    {
		PORTD = 0b11111111;
 180:	1f ef       	ldi	r17, 0xFF	; 255
 182:	12 bb       	out	0x12, r17	; 18
		for (int num = 0;num < 16;num++)
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
		{
			display(num);
 188:	ce 01       	movw	r24, r28
 18a:	9a df       	rcall	.-204    	; 0xc0 <display>
			wait(100);
 18c:	84 e6       	ldi	r24, 0x64	; 100
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	86 df       	rcall	.-244    	; 0x9e <wait>
	
	/* Replace with your application code */
    while (1) 
    {
		PORTD = 0b11111111;
		for (int num = 0;num < 16;num++)
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	c0 31       	cpi	r28, 0x10	; 16
 196:	d1 05       	cpc	r29, r1
 198:	b9 f7       	brne	.-18     	; 0x188 <main+0xc>
 19a:	f3 cf       	rjmp	.-26     	; 0x182 <main+0x6>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
