
OpdrachtB7B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097e  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000857  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000452  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	41 d0       	rcall	.+130    	; 0x11c <main>
  9a:	7b c0       	rjmp	.+246    	; 0x192 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <setCharliePlexingLed>:
	}
	return 1;
}

void setCharliePlexingLed(int lednr) {
	if(lednr == 0) {
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	29 f4       	brne	.+10     	; 0xac <setCharliePlexingLed+0xe>
		//Led 1 aan
		DDRD = 0b11111110;
  a2:	8e ef       	ldi	r24, 0xFE	; 254
  a4:	81 bb       	out	0x11, r24	; 17
		PORTD = 0b00000100;
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	82 bb       	out	0x12, r24	; 18
  aa:	08 95       	ret
	} else if(lednr == 1) {
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	29 f4       	brne	.+10     	; 0xbc <setCharliePlexingLed+0x1e>
		//Led 2 aan
		DDRD = 0b11111110;
  b2:	8e ef       	ldi	r24, 0xFE	; 254
  b4:	81 bb       	out	0x11, r24	; 17
		PORTD = 0b00000010;
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	08 95       	ret
	} else if(lednr == 2) {
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	91 05       	cpc	r25, r1
  c0:	29 f4       	brne	.+10     	; 0xcc <setCharliePlexingLed+0x2e>
		//Led 3 aan
		DDRD = 0b11111011;
  c2:	8b ef       	ldi	r24, 0xFB	; 251
  c4:	81 bb       	out	0x11, r24	; 17
		PORTD = 0b00000010;
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret
	} else if(lednr == 3) {
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	91 05       	cpc	r25, r1
  d0:	29 f4       	brne	.+10     	; 0xdc <setCharliePlexingLed+0x3e>
		//Led 4 aan
		DDRD = 0b11111011;
  d2:	8b ef       	ldi	r24, 0xFB	; 251
  d4:	81 bb       	out	0x11, r24	; 17
		PORTD = 0b00000001;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret
	} else if(lednr == 4) {
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	91 05       	cpc	r25, r1
  e0:	29 f4       	brne	.+10     	; 0xec <setCharliePlexingLed+0x4e>
		//Led 5 aan
		DDRD = 0b11111101;
  e2:	8d ef       	ldi	r24, 0xFD	; 253
  e4:	81 bb       	out	0x11, r24	; 17
		PORTD = 0b00000001;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	08 95       	ret
	} else if(lednr == 5) {
  ec:	05 97       	sbiw	r24, 0x05	; 5
  ee:	21 f4       	brne	.+8      	; 0xf8 <setCharliePlexingLed+0x5a>
		//Led 6 aan
		DDRD = 0b11111101;
  f0:	8d ef       	ldi	r24, 0xFD	; 253
  f2:	81 bb       	out	0x11, r24	; 17
		PORTD = 0b00000100;
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	08 95       	ret

000000fa <wait>:
	}
}

void wait(int ms) {
	for(int i = 0; i < ms; i++) {
  fa:	18 16       	cp	r1, r24
  fc:	19 06       	cpc	r1, r25
  fe:	6c f4       	brge	.+26     	; 0x11a <wait+0x20>
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	ef ec       	ldi	r30, 0xCF	; 207
 106:	f7 e0       	ldi	r31, 0x07	; 7
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <wait+0xe>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <wait+0x14>
 10e:	00 00       	nop
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	82 17       	cp	r24, r18
 116:	93 07       	cpc	r25, r19
 118:	a9 f7       	brne	.-22     	; 0x104 <wait+0xa>
 11a:	08 95       	ret

0000011c <main>:
#include <util/delay.h>


int main(void)
{
	DDRD = 0b00000000;
 11c:	11 ba       	out	0x11, r1	; 17
	int led = 0;
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
    {
		setCharliePlexingLed(led);
		wait(500);
		PORTD = 0b00000000;
		wait(500);
		led = (led + 1) % 6;	
 122:	06 e0       	ldi	r16, 0x06	; 6
 124:	10 e0       	ldi	r17, 0x00	; 0
	DDRD = 0b00000000;
	int led = 0;
    /* Replace with your application code */
    while (1) 
    {
		setCharliePlexingLed(led);
 126:	ce 01       	movw	r24, r28
 128:	ba df       	rcall	.-140    	; 0x9e <setCharliePlexingLed>
		wait(500);
 12a:	84 ef       	ldi	r24, 0xF4	; 244
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	e5 df       	rcall	.-54     	; 0xfa <wait>
		PORTD = 0b00000000;
 130:	12 ba       	out	0x12, r1	; 18
		wait(500);
 132:	84 ef       	ldi	r24, 0xF4	; 244
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	e1 df       	rcall	.-62     	; 0xfa <wait>
		led = (led + 1) % 6;	
 138:	ce 01       	movw	r24, r28
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	b8 01       	movw	r22, r16
 13e:	02 d0       	rcall	.+4      	; 0x144 <__divmodhi4>
 140:	ec 01       	movw	r28, r24
 142:	f1 cf       	rjmp	.-30     	; 0x126 <main+0xa>

00000144 <__divmodhi4>:
 144:	97 fb       	bst	r25, 7
 146:	07 2e       	mov	r0, r23
 148:	16 f4       	brtc	.+4      	; 0x14e <__divmodhi4+0xa>
 14a:	00 94       	com	r0
 14c:	06 d0       	rcall	.+12     	; 0x15a <__divmodhi4_neg1>
 14e:	77 fd       	sbrc	r23, 7
 150:	08 d0       	rcall	.+16     	; 0x162 <__divmodhi4_neg2>
 152:	0b d0       	rcall	.+22     	; 0x16a <__udivmodhi4>
 154:	07 fc       	sbrc	r0, 7
 156:	05 d0       	rcall	.+10     	; 0x162 <__divmodhi4_neg2>
 158:	3e f4       	brtc	.+14     	; 0x168 <__divmodhi4_exit>

0000015a <__divmodhi4_neg1>:
 15a:	90 95       	com	r25
 15c:	81 95       	neg	r24
 15e:	9f 4f       	sbci	r25, 0xFF	; 255
 160:	08 95       	ret

00000162 <__divmodhi4_neg2>:
 162:	70 95       	com	r23
 164:	61 95       	neg	r22
 166:	7f 4f       	sbci	r23, 0xFF	; 255

00000168 <__divmodhi4_exit>:
 168:	08 95       	ret

0000016a <__udivmodhi4>:
 16a:	aa 1b       	sub	r26, r26
 16c:	bb 1b       	sub	r27, r27
 16e:	51 e1       	ldi	r21, 0x11	; 17
 170:	07 c0       	rjmp	.+14     	; 0x180 <__udivmodhi4_ep>

00000172 <__udivmodhi4_loop>:
 172:	aa 1f       	adc	r26, r26
 174:	bb 1f       	adc	r27, r27
 176:	a6 17       	cp	r26, r22
 178:	b7 07       	cpc	r27, r23
 17a:	10 f0       	brcs	.+4      	; 0x180 <__udivmodhi4_ep>
 17c:	a6 1b       	sub	r26, r22
 17e:	b7 0b       	sbc	r27, r23

00000180 <__udivmodhi4_ep>:
 180:	88 1f       	adc	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	5a 95       	dec	r21
 186:	a9 f7       	brne	.-22     	; 0x172 <__udivmodhi4_loop>
 188:	80 95       	com	r24
 18a:	90 95       	com	r25
 18c:	bc 01       	movw	r22, r24
 18e:	cd 01       	movw	r24, r26
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
