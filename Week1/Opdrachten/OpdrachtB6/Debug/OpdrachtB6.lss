
OpdrachtB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095a  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000868  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000096  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	29 d0       	rcall	.+82     	; 0xfc <main>
  aa:	4d c0       	rjmp	.+154    	; 0x146 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
		}
    }
}

void wait(int ms) {
	for(int i = 0; i < ms; i++) {
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	1c f5       	brge	.+70     	; 0xfa <wait+0x4c>
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	50 e0       	ldi	r21, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	ef ec       	ldi	r30, 0xCF	; 207
  ba:	f7 e0       	ldi	r31, 0x07	; 7
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
		_delay_ms(1);
		if(PINC & 0x01) {
  c4:	98 9b       	sbis	0x13, 0	; 19
  c6:	14 c0       	rjmp	.+40     	; 0xf0 <wait+0x42>
			state = (state + 1) % 2;
  c8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  cc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	21 70       	andi	r18, 0x01	; 1
  d6:	30 78       	andi	r19, 0x80	; 128
  d8:	33 23       	and	r19, r19
  da:	34 f4       	brge	.+12     	; 0xe8 <wait+0x3a>
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	31 09       	sbc	r19, r1
  e0:	2e 6f       	ori	r18, 0xFE	; 254
  e2:	3f 6f       	ori	r19, 0xFF	; 255
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  ec:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
		}
    }
}

void wait(int ms) {
	for(int i = 0; i < ms; i++) {
  f0:	4f 5f       	subi	r20, 0xFF	; 255
  f2:	5f 4f       	sbci	r21, 0xFF	; 255
  f4:	84 17       	cp	r24, r20
  f6:	95 07       	cpc	r25, r21
  f8:	f9 f6       	brne	.-66     	; 0xb8 <wait+0xa>
  fa:	08 95       	ret

000000fc <main>:

int state = 0;

int main(void)
{
	DDRC = 0x00;
  fc:	14 ba       	out	0x14, r1	; 20
	DDRD = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	81 bb       	out	0x11, r24	; 17
	int ledOn = 0;
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		
		if(ledOn == 1) {
			PORTD = 0x00;
			ledOn = 0;
		} else {
			PORTD = 0b10000000;
 106:	68 94       	set
 108:	ff 24       	eor	r15, r15
 10a:	f7 f8       	bld	r15, 7
			ledOn = 1;
 10c:	01 e0       	ldi	r16, 0x01	; 1
 10e:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		
		if(ledOn == 1) {
			PORTD = 0x00;
			ledOn = 0;
 110:	d1 2c       	mov	r13, r1
 112:	e1 2c       	mov	r14, r1
	int ledOn = 0;
    /* Replace with your application code */
    while (1) 
    {
		
		if(ledOn == 1) {
 114:	21 97       	sbiw	r28, 0x01	; 1
 116:	21 f4       	brne	.+8      	; 0x120 <main+0x24>
			PORTD = 0x00;
 118:	12 ba       	out	0x12, r1	; 18
			ledOn = 0;
 11a:	cd 2d       	mov	r28, r13
 11c:	de 2d       	mov	r29, r14
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x2a>
		} else {
			PORTD = 0b10000000;
 120:	f2 ba       	out	0x12, r15	; 18
			ledOn = 1;
 122:	c0 2f       	mov	r28, r16
 124:	d1 2f       	mov	r29, r17
		}
		
		if(state == 0) {
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	21 f4       	brne	.+8      	; 0x13a <main+0x3e>
			wait(1000);
 132:	88 ee       	ldi	r24, 0xE8	; 232
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	bb df       	rcall	.-138    	; 0xae <wait>
 138:	ed cf       	rjmp	.-38     	; 0x114 <main+0x18>
		} else if(state == 1) {
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	59 f7       	brne	.-42     	; 0x114 <main+0x18>
			wait(250);
 13e:	8a ef       	ldi	r24, 0xFA	; 250
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	b5 df       	rcall	.-150    	; 0xae <wait>
 144:	e7 cf       	rjmp	.-50     	; 0x114 <main+0x18>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
