
OpdrachtB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000017c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b8  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087d  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  0000150d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001800  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000107  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 35       	cpi	r26, 0x54	; 84
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	13 d0       	rcall	.+38     	; 0xda <main>
  b4:	61 c0       	rjmp	.+194    	; 0x178 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
		}
    }
}

void wait(int ms) {
	for(int i = 0; i < ms; i++) {
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	c4 55       	subi	r28, 0x54	; 84
  e4:	d1 09       	sbc	r29, r1
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	81 bb       	out	0x11, r24	; 17
	
	int animation1[8] = {
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	e0 e0       	ldi	r30, 0x00	; 0
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	de 01       	movw	r26, r28
  fc:	11 96       	adiw	r26, 0x01	; 1
  fe:	01 90       	ld	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	8a 95       	dec	r24
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x24>
		0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101
	};
	
	int animation2[34] = {
 106:	84 e4       	ldi	r24, 0x44	; 68
 108:	e0 e1       	ldi	r30, 0x10	; 16
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	de 01       	movw	r26, r28
 10e:	51 96       	adiw	r26, 0x11	; 17
 110:	01 90       	ld	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	8a 95       	dec	r24
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x36>
 118:	7e 01       	movw	r14, r28
 11a:	81 e1       	ldi	r24, 0x11	; 17
 11c:	e8 0e       	add	r14, r24
 11e:	f1 1c       	adc	r15, r1
 120:	6e 01       	movw	r12, r28
 122:	e5 e5       	ldi	r30, 0x55	; 85
 124:	ce 0e       	add	r12, r30
 126:	d1 1c       	adc	r13, r1
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
 128:	0f 2e       	mov	r0, r31
 12a:	fa e0       	ldi	r31, 0x0A	; 10
 12c:	af 2e       	mov	r10, r31
 12e:	b1 2c       	mov	r11, r1
 130:	f0 2d       	mov	r31, r0
 132:	0f c0       	rjmp	.+30     	; 0x152 <main+0x78>
    /* Replace with your application code */
    while (1) 
    {
		for(int j = 0; j < 10; j++) {
			for(int i = 0; i < 8; i++) {
				PORTD = animation1[i];
 134:	f8 01       	movw	r30, r16
 136:	80 81       	ld	r24, Z
 138:	0e 5f       	subi	r16, 0xFE	; 254
 13a:	1f 4f       	sbci	r17, 0xFF	; 255
 13c:	82 bb       	out	0x12, r24	; 18
				wait(100);
 13e:	84 e6       	ldi	r24, 0x64	; 100
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	ba df       	rcall	.-140    	; 0xb8 <wait>
	
    /* Replace with your application code */
    while (1) 
    {
		for(int j = 0; j < 10; j++) {
			for(int i = 0; i < 8; i++) {
 144:	e0 16       	cp	r14, r16
 146:	f1 06       	cpc	r15, r17
 148:	a9 f7       	brne	.-22     	; 0x134 <main+0x5a>
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	af 1a       	sub	r10, r31
 14e:	b1 08       	sbc	r11, r1
	};
	
    /* Replace with your application code */
    while (1) 
    {
		for(int j = 0; j < 10; j++) {
 150:	21 f0       	breq	.+8      	; 0x15a <main+0x80>
 152:	8e 01       	movw	r16, r28
 154:	0f 5f       	subi	r16, 0xFF	; 255
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	ed cf       	rjmp	.-38     	; 0x134 <main+0x5a>
 15a:	8e 01       	movw	r16, r28
 15c:	0f 5e       	subi	r16, 0xEF	; 239
 15e:	1f 4f       	sbci	r17, 0xFF	; 255
				wait(100);
			}
		}
		
		for(int i = 0; i < 34; i++) {
			PORTD = animation2[i];
 160:	f8 01       	movw	r30, r16
 162:	80 81       	ld	r24, Z
 164:	0e 5f       	subi	r16, 0xFE	; 254
 166:	1f 4f       	sbci	r17, 0xFF	; 255
 168:	82 bb       	out	0x12, r24	; 18
			wait(50);
 16a:	82 e3       	ldi	r24, 0x32	; 50
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	a4 df       	rcall	.-184    	; 0xb8 <wait>
				PORTD = animation1[i];
				wait(100);
			}
		}
		
		for(int i = 0; i < 34; i++) {
 170:	0c 15       	cp	r16, r12
 172:	1d 05       	cpc	r17, r13
 174:	a9 f7       	brne	.-22     	; 0x160 <main+0x86>
 176:	d8 cf       	rjmp	.-80     	; 0x128 <main+0x4e>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
